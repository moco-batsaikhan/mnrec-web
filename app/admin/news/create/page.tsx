"use client";

import { useState, useRef } from "react";
import { useRouter } from "next/navigation";
import dynamic from 'next/dynamic';

// Dynamically import TipTap editor to avoid SSR issues
const TipTapEditor = dynamic(() => import("../../components/TipTapEditor"), {
  ssr: false,
  loading: () => <div className="p-4 text-center text-gray-600">Editor –∞—á–∞–∞–ª–ª–∞–∂ –±–∞–π–Ω–∞...</div>
});

interface NewsForm {
  title: string;
  content: string;
  summary: string;
  en_title: string;
  en_content: string;
  en_summary: string;
  status: "draft" | "published" | "archived";
  category: "homeNews" | "homeIntroduction" | "news";
  tags: string[];
  featuredImage: string;
}

export default function CreateNews() {
  const [formData, setFormData] = useState<NewsForm>({
    title: "",
    content: "",
    summary: "",
    en_title: "",
    en_content: "",
    en_summary: "",
    status: "draft",
    category: "news",
    tags: [],
    featuredImage: "",
  });
  const [loading, setLoading] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [tagInput, setTagInput] = useState("");
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [imagePreview, setImagePreview] = useState("");
  const [activeTab, setActiveTab] = useState<"mn" | "en">("mn");
  const router = useRouter();



  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};

    if (!formData.title.trim()) {
      errors.title = "–ì–∞—Ä—á–∏–≥ –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É";
    } else if (formData.title.length < 5) {
      errors.title = "–ì–∞—Ä—á–∏–≥ —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 5 —Ç—ç–º–¥—ç–≥—Ç –±–∞–π—Ö —ë—Å—Ç–æ–π";
    } else if (formData.title.length > 200) {
      errors.title = "–ì–∞—Ä—á–∏–≥ 200 —Ç—ç–º–¥—ç–≥—Ç—ç—ç—Å —Ö—ç—Ç—Ä—ç–∂ –±–æ–ª–æ—Ö–≥“Ø–π";
    }

    if (!formData.summary.trim()) {
      errors.summary = "–¢–æ–≤—á –∞–≥—É—É–ª–≥–∞ –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É";
    } else if (formData.summary.length < 20) {
      errors.summary = "–¢–æ–≤—á –∞–≥—É—É–ª–≥–∞ —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 20 —Ç—ç–º–¥—ç–≥—Ç –±–∞–π—Ö —ë—Å—Ç–æ–π";
    } else if (formData.summary.length > 500) {
      errors.summary = "–¢–æ–≤—á –∞–≥—É—É–ª–≥–∞ 500 —Ç—ç–º–¥—ç–≥—Ç—ç—ç—Å —Ö—ç—Ç—Ä—ç–∂ –±–æ–ª–æ—Ö–≥“Ø–π";
    }

    if (!formData.content.trim()) {
      errors.content = "–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–≥—É—É–ª–≥–∞ –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É";
    } else if (formData.content.length < 50) {
      errors.content = "–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–≥—É—É–ª–≥–∞ —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 50 —Ç—ç–º–¥—ç–≥—Ç –±–∞–π—Ö —ë—Å—Ç–æ–π";
    }



    if (formData.featuredImage && !isValidImageUrl(formData.featuredImage)) {
      errors.featuredImage = "–ó—É—Ä–≥–∏–π–Ω URL –±—É—Ä—É—É –±–∞–π–Ω–∞";
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const isValidImageUrl = (url: string): boolean => {
    const imageExtensions = [".jpg", ".jpeg", ".png", ".gif", ".webp", ".svg"];
    return imageExtensions.some(ext => url.toLowerCase().includes(ext)) || url.startsWith("http");
  };

  const handleChange = (field: keyof NewsForm, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value,
    }));

    // Clear validation error when user starts typing
    if (validationErrors[field]) {
      setValidationErrors(prev => ({
        ...prev,
        [field]: "",
      }));
    }

    // Update image preview
    if (field === "featuredImage" && value) {
      setImagePreview(value);
    }
  };

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) {
      console.log("No file selected");
      return;
    }

    console.log("File selected:", file.name, file.type, file.size);

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    if (!allowedTypes.includes(file.type)) {
      setError("–ó”©–≤—Ö”©–Ω –∑—É—Ä–∞–≥ —Ñ–∞–π–ª –∞—à–∏–≥–ª–∞–Ω–∞ —É—É (JPG, PNG, WebP, GIF)");
      return;
    }

    const maxSize = 5 * 1024 * 1024; 
    if (file.size > maxSize) {
      setError("–ó—É—Ä–≥–∏–π–Ω —Ö—ç–º–∂—ç—ç 5MB-–∞–∞—Å —Ö—ç—Ç—ç—Ä—á –±–æ–ª–æ—Ö–≥“Ø–π");
      return;
    }

    setUploading(true);
    setError("");

    try {
      // Create FormData for upload
      const formData = new FormData();
      formData.append('image', file);
      
      console.log("Starting upload to /api/upload/image");

      // Upload to our API endpoint
      const response = await fetch('/api/upload/image', {
        method: 'POST',
        body: formData,
      });
      
      console.log("Upload response status:", response.status);

      if (response.ok) {
        const result = await response.json();
        const imageUrl = result.url;
        
        console.log("Upload successful, image URL:", imageUrl);
        
        // Update form data and preview
        handleChange("featuredImage", imageUrl);
        setImagePreview(imageUrl);
        setSuccess("–ó—É—Ä–∞–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞—á–∞–∞–ª–ª–∞–≥–¥–ª–∞–∞!");
        
        // Clear success message after 3 seconds
        setTimeout(() => setSuccess(""), 3000);
      } else {
        const errorResult = await response.json();
        console.log("Upload failed:", errorResult);
        setError(errorResult.message || "–ó—É—Ä–∞–≥ –∞—á–∞–∞–ª–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
      }
    } catch (error) {
      console.error("Image upload error:", error);
      setError("–ó—É—Ä–∞–≥ –∞—á–∞–∞–ª–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    } finally {
      setUploading(false);
      // Reset file input
      e.target.value = '';
      console.log("File input reset after upload");
    }
  };



  const handleAddTag = () => {
    const trimmedTag = tagInput.trim();
    if (trimmedTag && !formData.tags.includes(trimmedTag)) {
      if (formData.tags.length >= 10) {
        setError("–•–∞–º–≥–∏–π–Ω –∏—Ö–¥—ç—ç 10 —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ –Ω—ç–º—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π");
        return;
      }
      if (trimmedTag.length > 30) {
        setError("–¢“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ 30 —Ç—ç–º–¥—ç–≥—Ç—ç—ç—Å —Ö—ç—Ç—Ä—ç–∂ –±–æ–ª–æ—Ö–≥“Ø–π");
        return;
      }
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, trimmedTag],
      }));
      setTagInput("");
      setError("");
    }
  };

  const handleTagKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleAddTag();
    } else if (e.key === "Backspace" && tagInput === "" && formData.tags.length > 0) {
      // Remove last tag when backspace is pressed on empty input
      setFormData(prev => ({
        ...prev,
        tags: prev.tags.slice(0, -1),
      }));
    }
  };

  const handleRemoveTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove),
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    setError("");
    setSuccess("");

    if (!validateForm()) {
      setError("–§–æ—Ä–º—ã–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∑”©–≤ –±”©–≥–ª”©–Ω”© “Ø“Ø");
      return;
    }

    setLoading(true);

    try {
      console.log("üì§ Sending news data:", {
        title: formData.title,
        en_title: formData.en_title,
        status: formData.status,
        tags: formData.tags,
        hasContent: !!formData.content,
        hasEnContent: !!formData.en_content,
      });

      const response = await fetch("/api/news", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...formData,
          authorId: 1, // Demo - –±–æ–¥–∏—Ç–æ–æ—Ä current user-–∞–∞—Å –∞–≤–Ω–∞
        }),
      });

      console.log("üì• Response status:", response.status);
      
      const result = await response.json();
      console.log("üì• Response data:", result);

      if (response.ok) {
        setSuccess("–ú—ç–¥—ç—ç –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç!");
        setTimeout(() => {
          router.push("/admin/news");
        }, 1500);
      } else {
        console.error("‚ùå Server error:", result);
        setError(result.message || "–ú—ç–¥—ç—ç –Ω—ç–º—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
      }
    } catch (error) {
      console.error("‚ùå News create –∞–ª–¥–∞–∞:", error);
      setError(`–°–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setLoading(false);
    }
  };

  const handleDraft = async () => {
    const draftData = { ...formData, status: "draft" as const };
    setFormData(draftData);

    // Save as draft with minimal validation
    if (!draftData.title.trim()) {
      setError("–ù–æ–æ—Ä–æ–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –≥–∞—Ä—á–∏–≥ –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É");
      return;
    }

    setLoading(true);
    setError("");

    try {
      const response = await fetch("/api/news", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...draftData,
          authorId: 1,
        }),
      });

      if (response.ok) {
        setSuccess("–ù–æ–æ—Ä–æ–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞!");
        setTimeout(() => {
          router.push("/admin/news");
        }, 1500);
      } else {
        const result = await response.json();
        setError(result.message || "–ù–æ–æ—Ä–æ–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
      }
    } catch (error) {
      console.error("Draft save –∞–ª–¥–∞–∞:", error);
      setError("–°–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">–®–∏–Ω—ç –º—ç–¥—ç—ç –Ω—ç–º—ç—Ö</h1>
            <p className="text-gray-600">–í–µ–± —Å–∞–π—Ç–∞–¥ –Ω–∏–π—Ç–ª—ç—Ö —à–∏–Ω—ç –º—ç–¥—ç—ç “Ø“Ø—Å–≥—ç—Ö</p>
          </div>
          <button
            type="button"
            onClick={() => router.back()}
            className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors"
          >
            –ë—É—Ü–∞—Ö
          </button>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white rounded-lg shadow p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Language Tabs */}
          <div className="border-b border-gray-200">
            <div className="flex space-x-1">
              <button
                type="button"
                onClick={() => setActiveTab("mn")}
                className={`px-6 py-3 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === "mn"
                    ? "border-blue-500 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                üá≤üá≥ –ú–æ–Ω–≥–æ–ª —Ö—ç–ª
              </button>
              <button
                type="button"
                onClick={() => setActiveTab("en")}
                className={`px-6 py-3 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === "en"
                    ? "border-blue-500 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                üá¨üáß English
              </button>
            </div>
          </div>

          {/* Mongolian Content */}
          {activeTab === "mn" && (
            <div className="space-y-6">
              {/* Title */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">–ì–∞—Ä—á–∏–≥ *</label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={e => handleChange("title", e.target.value)}
                  className={`w-full px-4 py-3 text-gray-800 text-base border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400 ${
                    validationErrors.title ? "border-red-300 bg-red-50" : "border-gray-300"
                  }`}
                  placeholder="–ú—ç–¥—ç—ç–Ω–∏–π –≥–∞—Ä—á–∏–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É"
                />
                {validationErrors.title && (
                  <p className="text-red-500 text-sm mt-1">{validationErrors.title}</p>
                )}
              </div>

              {/* Summary */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">–¢–æ–≤—á –∞–≥—É—É–ª–≥–∞ *</label>
                <textarea
                  value={formData.summary}
                  onChange={e => handleChange("summary", e.target.value)}
                  rows={4}
                  className={`w-full px-4 py-3 text-gray-800 text-base border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none placeholder-gray-400 ${
                    validationErrors.summary ? "border-red-300 bg-red-50" : "border-gray-300"
                  }`}
                  placeholder="–ú—ç–¥—ç—ç–Ω–∏–π —Ç–æ–≤—á –∞–≥—É—É–ª–≥–∞ (2-3 ”©–≥“Ø“Ø–ª–±—ç—Ä, 20-500 —Ç—ç–º–¥—ç–≥—Ç)"
                />
                {validationErrors.summary && (
                  <p className="text-red-500 text-sm mt-1">{validationErrors.summary}</p>
                )}
                <p className="text-gray-500 text-xs mt-1">{formData.summary.length}/500 —Ç—ç–º–¥—ç–≥—Ç</p>
              </div>

              {/* Content */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–≥—É—É–ª–≥–∞ *
                </label>
                <div className={validationErrors.content ? "border-2 border-red-300 rounded-lg" : ""}>
                  <TipTapEditor
                    value={formData.content}
                    onChange={(content) => handleChange("content", content)}
                    placeholder="–ú—ç–¥—ç—ç–Ω–∏–π –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∞–≥—É—É–ª–≥—ã–≥ —ç–Ω–¥ –±–∏—á–Ω—ç “Ø“Ø..."
                    readOnly={false}
                  />
                </div>
                {validationErrors.content && (
                  <p className="text-red-500 text-sm mt-1">{validationErrors.content}</p>
                )}
                <p className="text-gray-500 text-xs mt-1">
                  {formData.content.replace(/<[^>]*>/g, "").length} —Ç—ç–º–¥—ç–≥—Ç (HTML-–≥“Ø–π)
                </p>
              </div>
            </div>
          )}

          {/* English Content */}
          {activeTab === "en" && (
            <div className="space-y-6">
              {/* English Title */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
                <input
                  type="text"
                  value={formData.en_title}
                  onChange={e => handleChange("en_title", e.target.value)}
                  className="w-full px-4 py-3 text-gray-800 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400"
                  placeholder="Enter news title in English"
                />
                <p className="text-gray-500 text-xs mt-1">Optional - English translation</p>
              </div>

              {/* English Summary */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Summary</label>
                <textarea
                  value={formData.en_summary}
                  onChange={e => handleChange("en_summary", e.target.value)}
                  rows={4}
                  className="w-full px-4 py-3 text-gray-800 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none placeholder-gray-400"
                  placeholder="Brief summary in English (2-3 sentences)"
                />
                <p className="text-gray-500 text-xs mt-1">{formData.en_summary.length}/500 characters</p>
              </div>

              {/* English Content */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Detailed Content
                </label>
                <TipTapEditor
                  value={formData.en_content}
                  onChange={(content) => handleChange("en_content", content)}
                  placeholder="Write the detailed news content in English..."
                  readOnly={false}
                />
                <p className="text-gray-500 text-xs mt-1">
                  {formData.en_content.replace(/<[^>]*>/g, "").length} characters (HTML-free)
                </p>
              </div>
            </div>
          )}

          {/* Title */}
          <div style={{ display: 'none' }}>
            <label className="block text-sm font-medium text-gray-700 mb-2">–ì–∞—Ä—á–∏–≥ *</label>
            <input
              type="text"
              value={formData.title}
              onChange={e => handleChange("title", e.target.value)}
              className={`w-full px-4 py-3 text-gray-800 text-base border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400 ${
                validationErrors.title ? "border-red-300 bg-red-50" : "border-gray-300"
              }`}
              placeholder="–ú—ç–¥—ç—ç–Ω–∏–π –≥–∞—Ä—á–∏–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É"
            />
            {validationErrors.title && (
              <p className="text-red-500 text-sm mt-1">{validationErrors.title}</p>
            )}
            <p className="text-gray-500 text-xs mt-1">{formData.title.length}/200 —Ç—ç–º–¥—ç–≥—Ç</p>
          </div>

          {/* Status and other shared fields */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–¢”©–ª”©–≤</label>
              <select
                value={formData.status}
                onChange={e =>
                  handleChange("status", e.target.value as "draft" | "published" | "archived")
                }
                className="w-full px-4 py-3 text-gray-800 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="draft">–ù–æ–æ—Ä–æ–≥</option>
                <option value="published">–ù–∏–π—Ç–ª—ç—Ö</option>
                <option value="archived">–ê—Ä—Ö–∏–≤–ª–∞—Ö</option>
              </select>
              <p className="text-gray-500 text-xs mt-1">
                {formData.status === "draft" && "–ù–æ–æ—Ä–æ–≥ –Ω—å —Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω –±–æ–ª–æ–≤—á –Ω–∏–π—Ç–ª—ç–≥–¥—ç—ç–≥“Ø–π"}
                {formData.status === "published" && "–ù–∏–π—Ç–ª—ç–≥–¥—Å—ç–Ω –Ω—å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ —Ö–∞—Ä–∞–≥–¥–∞–Ω–∞"}
                {formData.status === "archived" && "–ê—Ä—Ö–∏–≤–ª–∞–≥–¥—Å–∞–Ω –Ω—å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ —Ö–∞—Ä–∞–≥–¥–∞—Ö–≥“Ø–π"}
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–ê–Ω–≥–∏–ª–∞–ª</label>
              <select
                value={formData.category}
                onChange={e =>
                  handleChange("category", e.target.value as "homeNews" | "homeIntroduction" | "news")
                }
                className="w-full px-4 py-3 text-gray-800 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="news">–ú—ç–¥—ç—ç</option>
                <option value="homeNews">–ù“Ø“Ø—Ä —Ö—É—É–¥–∞—Å–Ω—ã –º—ç–¥—ç—ç</option>
                <option value="homeIntroduction">–ù“Ø“Ø—Ä —Ö—É—É–¥–∞—Å–Ω—ã —Ç–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞</option>
              </select>
              <p className="text-gray-500 text-xs mt-1">
                {formData.category === "homeNews" && "–ù“Ø“Ø—Ä —Ö—É—É–¥—Å–∞–Ω–¥ —Ö–∞—Ä–∞–≥–¥–∞—Ö –º—ç–¥—ç—ç"}
                {formData.category === "homeIntroduction" && "–ù“Ø“Ø—Ä —Ö—É—É–¥—Å–∞–Ω–¥ —Ö–∞—Ä–∞–≥–¥–∞—Ö —Ç–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞"}
                {formData.category === "news" && "–ï—Ä–¥–∏–π–Ω –º—ç–¥—ç—ç"}
              </p>
            </div>
          </div>

          {/* Featured Image */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">–û–Ω—Ü–ª–æ—Ö –∑—É—Ä–∞–≥</label>
            
            {/* Image Preview Section */}
            {imagePreview ? (
              <div className="mb-4">
                <p className="text-sm font-medium text-gray-700 mb-2">–°–æ–Ω–≥–æ–≥–¥—Å–æ–Ω –∑—É—Ä–∞–≥:</p>
                <div className="relative inline-block border rounded-lg p-2 bg-gray-50">
                  <img
                    src={imagePreview}
                    alt="Preview"
                    className="w-full max-w-sm h-32 object-cover rounded"
                    onError={() => setImagePreview("")}
                  />
                  <button
                    type="button"
                    onClick={() => {
                      console.log("Create: Removing image preview...");
                      setImagePreview("");
                      handleChange("featuredImage", "");
                      // Clear file input
                      const fileInput = document.getElementById('image-upload') as HTMLInputElement;
                      if (fileInput) {
                        fileInput.value = '';
                        console.log("File input cleared");
                      }
                    }}
                    className="absolute -top-2 -right-2 bg-red-500 hover:bg-red-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold"
                    title="–ó—É—Ä–∞–≥ –∞—Ä–∏–ª–≥–∞—Ö"
                  >
                    √ó
                  </button>
                </div>
              </div>
            ) : null}

            {/* Upload Controls */}
            <div className="space-y-3">
              {/* File upload button */}
              <div>
                <label
                  htmlFor="image-upload"
                  className={`block w-full py-3 px-4 rounded-lg transition-colors font-medium text-center ${
                    uploading
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 hover:bg-blue-700 cursor-pointer'
                  } text-white`}
                >
                  {uploading ? (
                    <>
                      <div className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      –ó—É—Ä–∞–≥ –∞—á–∞–∞–ª–ª–∞–∂ –±–∞–π–Ω–∞...
                    </>
                  ) : (
                    <>
                      <span className="text-lg mr-2">üì∑</span>
                      {imagePreview ? "”®”©—Ä –∑—É—Ä–∞–≥ —Å–æ–Ω–≥–æ—Ö" : "–ó—É—Ä–∞–≥ —Å–æ–Ω–≥–æ—Ö"}
                    </>
                  )}
                </label>
                <input
                  type="file"
                  accept="image/jpeg,image/jpg,image/png,image/webp,image/gif"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="image-upload"
                  disabled={uploading}
                />
              </div>

              <p className="text-xs text-gray-500 text-center">
                –ó”©–≤—Ö”©–Ω PNG, JPG, WebP, GIF —Ñ–æ—Ä–º–∞—Ç—ã–≥ –¥—ç–º–∂–¥—ç–≥ (—Ö–∞–º–≥–∏–π–Ω –∏—Ö–¥—ç—ç 5MB)
              </p>

              {/* URL Input Alternative */}
              <div className="relative my-4">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-gray-300" />
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="px-3 bg-white text-gray-500">—ç—Å–≤—ç–ª URL –æ—Ä—É—É–ª–∞—Ö</span>
                </div>
              </div>

              <input
                type="text"
                value={formData.featuredImage}
                onChange={e => handleChange("featuredImage", e.target.value)}
                className={`w-full px-4 py-3 text-gray-800 text-base border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400 ${
                  validationErrors.featuredImage ? "border-red-300 bg-red-50" : "border-gray-300"
                }`}
                placeholder="https://example.com/image.jpg"
              />

              {validationErrors.featuredImage && (
                <p className="text-red-500 text-sm mt-1">{validationErrors.featuredImage}</p>
              )}
            </div>
          </div>

          {/* Tags */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">–¢“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥—Å</label>
            <div className="space-y-3">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={tagInput}
                  onChange={e => setTagInput(e.target.value)}
                  onKeyPress={handleTagKeyPress}
                  className="flex-1 px-4 py-3 text-gray-800 text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400"
                  placeholder="üè∑Ô∏è –ñ–∏—à—ç—ç –Ω—å: IMARC, —Ö—É—Ä–∞–ª, —É—É–ª —É—É—Ä—Ö–∞–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏ (Enter –¥–∞—Ä–∂ –Ω—ç–º—ç—Ö)"
                  maxLength={30}
                />
                <button
                  type="button"
                  onClick={handleAddTag}
                  disabled={!tagInput.trim() || formData.tags.length >= 10}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  –ù—ç–º—ç—Ö
                </button>
              </div>

              <p className="text-xs text-gray-500">
                {formData.tags.length}/10 —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ ‚Ä¢ Backspace: —Å“Ø“Ø–ª–∏–π–Ω —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥–∏–π–≥ —É—Å—Ç–≥–∞—Ö
              </p>

              {formData.tags.length > 0 && (
                <div className="flex flex-wrap gap-2 p-3 bg-gray-50 rounded-lg">
                  {formData.tags.map((tag, index) => (
                    <span
                      key={tag}
                      className="inline-flex items-center bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full hover:bg-blue-200 transition-colors"
                    >
                      <span className="text-xs text-blue-600 mr-1">#{index + 1}</span>
                      {tag}
                      <button
                        type="button"
                        onClick={() => handleRemoveTag(tag)}
                        className="ml-2 text-blue-600 hover:text-red-600 font-bold"
                        title="–£—Å—Ç–≥–∞—Ö"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
              )}

              {formData.tags.length === 0 && (
                <div className="text-center py-6 bg-gray-50 rounded-lg">
                  <p className="text-gray-500 text-sm">–¢“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ –Ω—ç–º—ç—ç–≥“Ø–π –±–∞–π–Ω–∞</p>
                  <p className="text-gray-400 text-xs mt-1">–•–∞–π–ª—Ç–∞–Ω–¥ —Ç—É—Å–∞–ª–Ω–∞</p>
                </div>
              )}
            </div>
          </div>

          {/* Messages */}
          {error && (
            <div className="rounded-md bg-red-50 border border-red-200 p-4">
              <div className="flex items-center">
                <span className="text-red-500 mr-2">‚ùå</span>
                <div className="text-sm text-red-700">{error}</div>
              </div>
            </div>
          )}

          {success && (
            <div className="rounded-md bg-green-50 border border-green-200 p-4">
              <div className="flex items-center">
                <span className="text-green-500 mr-2">‚úÖ</span>
                <div className="text-sm text-green-700">{success}</div>
              </div>
            </div>
          )}

          {/* Submit Buttons */}
          <div className="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4 pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={() => router.back()}
              disabled={loading}
              className="bg-gray-300 hover:bg-gray-400 text-gray-700 px-6 py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              –¶—É—Ü–ª–∞—Ö
            </button>

            <button
              type="button"
              onClick={handleDraft}
              disabled={loading || !formData.title.trim()}
              className="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? "–•–∞–¥–≥–∞–ª–∂ –±–∞–π–Ω–∞..." : "üìù –ù–æ–æ—Ä–æ–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö"}
            </button>

            <button
              type="submit"
              disabled={loading}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading
                ? "–•–∞–¥–≥–∞–ª–∂ –±–∞–π–Ω–∞..."
                : formData.status === "published"
                ? "‚úÖ –ù–∏–π—Ç–ª—ç—Ö"
                : formData.status === "archived"
                ? "üì¶ –ê—Ä—Ö–∏–≤–ª–∞—Ö"
                : "üìù –•–∞–¥–≥–∞–ª–∞—Ö"}
            </button>
          </div>

          {/* Help Text */}
          <div className="mt-4 p-4 bg-blue-50 rounded-lg">
            <h4 className="text-sm font-medium text-blue-900 mb-2">üí° –ó”©–≤–ª”©–º–∂:</h4>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>
                ‚Ä¢ <strong>–ù–æ–æ—Ä–æ–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö:</strong> –ó”©–≤—Ö”©–Ω –≥–∞—Ä—á–∏–≥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π, –¥–∞—Ä–∞–∞ –Ω—å –∑–∞—Å–≤–∞—Ä–ª–∞—Ö
                –±–æ–ª–æ–º–∂—Ç–æ–π
              </li>
              <li>
                ‚Ä¢ <strong>–ù–∏–π—Ç–ª—ç—Ö:</strong> –ë“Ø—Ö —Ç–∞–ª–±–∞—Ä –±”©–≥–ª”©—Å–Ω–∏–π –¥–∞—Ä–∞–∞ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ —Ö–∞—Ä—É—É–ª–Ω–∞
              </li>
              <li>
                ‚Ä¢ <strong>–ê—Ä—Ö–∏–≤–ª–∞—Ö:</strong> –•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω –±–æ–ª–æ–≤—á —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ —Ö–∞—Ä–∞–≥–¥–∞—Ö–≥“Ø–π
              </li>
            </ul>
          </div>
        </form>
      </div>
    </div>
  );
}
